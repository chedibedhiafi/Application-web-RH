// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    [Migration("20230824210106_ApplicationUser")]
    partial class ApplicationUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationCore.Domain.Absence", b =>
                {
                    b.Property<int>("AbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbsenceId"), 1L, 1);

                    b.Property<int>("EmplyeesFk")
                        .HasColumnType("int");

                    b.Property<int>("TypeJustificatifFk")
                        .HasColumnType("int");

                    b.Property<int>("nbAbsence")
                        .HasColumnType("int");

                    b.HasKey("AbsenceId");

                    b.HasIndex("EmplyeesFk");

                    b.HasIndex("TypeJustificatifFk");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Attestation", b =>
                {
                    b.Property<int>("AttestationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttestationId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentAttestation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeFk")
                        .HasColumnType("int");

                    b.HasKey("AttestationId");

                    b.HasIndex("EmployeeFk");

                    b.ToTable("Attestations");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Conges", b =>
                {
                    b.Property<int>("CongesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CongesId"), 1L, 1);

                    b.Property<int>("ConfirmePar")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Raison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemplassePar")
                        .HasColumnType("int");

                    b.Property<int>("TypeConfirmationFk")
                        .HasColumnType("int");

                    b.Property<int>("TypeCongesFk")
                        .HasColumnType("int");

                    b.HasKey("CongesId");

                    b.HasIndex("ConfirmePar");

                    b.HasIndex("IdEmployees");

                    b.HasIndex("RemplassePar");

                    b.HasIndex("TypeConfirmationFk");

                    b.HasIndex("TypeCongesFk");

                    b.ToTable("Conges");
                });

            modelBuilder.Entity("ApplicationCore.Domain.ContreVisite", b =>
                {
                    b.Property<int>("ContreVisiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContreVisiteId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EffectuerPar")
                        .HasColumnType("int");

                    b.HasKey("ContreVisiteId");

                    b.HasIndex("EffectuerPar");

                    b.ToTable("ContreVisites");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Employees", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Cin")
                        .HasColumnType("int");

                    b.Property<int>("CreditConges")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<int>("FonctionEmployeeFk")
                        .HasColumnType("int");

                    b.Property<int>("GenreFk")
                        .HasColumnType("int");

                    b.Property<int>("Matricule")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomArabe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrenomArabe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleFk")
                        .HasColumnType("int");

                    b.Property<int>("SectionFk")
                        .HasColumnType("int");

                    b.Property<int>("SituationFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("FonctionEmployeeFk");

                    b.HasIndex("GenreFk");

                    b.HasIndex("RoleFk");

                    b.HasIndex("SectionFk");

                    b.HasIndex("SituationFk");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.FonctionEmployee", b =>
                {
                    b.Property<int>("FonctionEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FonctionEmployeeId"), 1L, 1);

                    b.Property<string>("Fonction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FonctionEmployeeId");

                    b.ToTable("FonctionEmployees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("NomGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ApplicationCore.Domain.GestionDocument", b =>
                {
                    b.Property<int>("GestionDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GestionDocumentId"), 1L, 1);

                    b.Property<int>("AttestationFk")
                        .HasColumnType("int");

                    b.Property<int>("TypeJustificatifFk")
                        .HasColumnType("int");

                    b.HasKey("GestionDocumentId");

                    b.HasIndex("AttestationFk");

                    b.HasIndex("TypeJustificatifFk");

                    b.ToTable("GestionDocuments");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Hierarchie", b =>
                {
                    b.Property<int>("HierarchieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HierarchieId"), 1L, 1);

                    b.Property<string>("Niveau")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HierarchieId");

                    b.ToTable("Hierarchies");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MissionId"), 1L, 1);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MissionId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("NomRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<string>("NomSection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Situation", b =>
                {
                    b.Property<int>("SituationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SituationId"), 1L, 1);

                    b.Property<string>("nomSituation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SituationId");

                    b.ToTable("Situations");
                });

            modelBuilder.Entity("ApplicationCore.Domain.TypeConfirmation", b =>
                {
                    b.Property<int>("TypeConfirmationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeConfirmationId"), 1L, 1);

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeConfirmationId");

                    b.ToTable("typeConfirmations");
                });

            modelBuilder.Entity("ApplicationCore.Domain.TypeConges", b =>
                {
                    b.Property<int>("TypeCongesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeCongesId"), 1L, 1);

                    b.Property<int?>("ContreVisiteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NecessiteCv")
                        .HasColumnType("bit");

                    b.Property<int>("nbMaximumdeJour")
                        .HasColumnType("int");

                    b.HasKey("TypeCongesId");

                    b.HasIndex("ContreVisiteId");

                    b.ToTable("TypeConges");
                });

            modelBuilder.Entity("ApplicationCore.Domain.TypeJustificatif", b =>
                {
                    b.Property<int>("TypeJustificatifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeJustificatifId"), 1L, 1);

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeJustificatifId");

                    b.ToTable("TypeJustificatifs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CustomTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Absence", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Employees", "Employees")
                        .WithMany("Absences")
                        .HasForeignKey("EmplyeesFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.TypeJustificatif", "TypeJustificatif")
                        .WithMany("Absences")
                        .HasForeignKey("TypeJustificatifFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("TypeJustificatif");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Attestation", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Employees", "Employees")
                        .WithMany("Attestations")
                        .HasForeignKey("EmployeeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Conges", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Employees", "ConfirmeParEmployee")
                        .WithMany()
                        .HasForeignKey("ConfirmePar")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Employees", "Employees")
                        .WithMany("Conges")
                        .HasForeignKey("IdEmployees")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Employees", "RemplasseParEmployee")
                        .WithMany()
                        .HasForeignKey("RemplassePar")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.TypeConfirmation", "TypeConfirmation")
                        .WithMany("Conges")
                        .HasForeignKey("TypeConfirmationFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.TypeConges", "TypeConges")
                        .WithMany("Conges")
                        .HasForeignKey("TypeCongesFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmeParEmployee");

                    b.Navigation("Employees");

                    b.Navigation("RemplasseParEmployee");

                    b.Navigation("TypeConfirmation");

                    b.Navigation("TypeConges");
                });

            modelBuilder.Entity("ApplicationCore.Domain.ContreVisite", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Employees", "Employees")
                        .WithMany("ContreVisites")
                        .HasForeignKey("EffectuerPar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Employees", b =>
                {
                    b.HasOne("ApplicationCore.Domain.FonctionEmployee", "FonctionEmployee")
                        .WithMany("Employees")
                        .HasForeignKey("FonctionEmployeeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Genre", "Genre")
                        .WithMany("Employees")
                        .HasForeignKey("GenreFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Section", "Section")
                        .WithMany("Employees")
                        .HasForeignKey("SectionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Situation", "Situation")
                        .WithMany("Employees")
                        .HasForeignKey("SituationFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FonctionEmployee");

                    b.Navigation("Genre");

                    b.Navigation("Role");

                    b.Navigation("Section");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("ApplicationCore.Domain.GestionDocument", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Attestation", "Attestation")
                        .WithMany("GestionDocuments")
                        .HasForeignKey("AttestationFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.TypeJustificatif", "TypeJustificatif")
                        .WithMany("GestionDocuments")
                        .HasForeignKey("TypeJustificatifFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attestation");

                    b.Navigation("TypeJustificatif");
                });

            modelBuilder.Entity("ApplicationCore.Domain.TypeConges", b =>
                {
                    b.HasOne("ApplicationCore.Domain.ContreVisite", "ContreVisite")
                        .WithMany("TypeConges")
                        .HasForeignKey("ContreVisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContreVisite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Domain.Attestation", b =>
                {
                    b.Navigation("GestionDocuments");
                });

            modelBuilder.Entity("ApplicationCore.Domain.ContreVisite", b =>
                {
                    b.Navigation("TypeConges");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Employees", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Attestations");

                    b.Navigation("Conges");

                    b.Navigation("ContreVisites");
                });

            modelBuilder.Entity("ApplicationCore.Domain.FonctionEmployee", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Genre", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Section", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Situation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Domain.TypeConfirmation", b =>
                {
                    b.Navigation("Conges");
                });

            modelBuilder.Entity("ApplicationCore.Domain.TypeConges", b =>
                {
                    b.Navigation("Conges");
                });

            modelBuilder.Entity("ApplicationCore.Domain.TypeJustificatif", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("GestionDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
